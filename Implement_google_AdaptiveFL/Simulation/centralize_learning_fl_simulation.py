# -*- coding: utf-8 -*-
"""Kuihao_FL_Sequential_Multi-Clients_Simulation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/kuihao/2b8b376fd307d83661fcd65679cc99ec/kuihao_fl_sequential_multi-clients_simulation.ipynb

#Prepare Dataset
"""

dataset_path = 'dataset/cifar100_noniid/content/zip/cifar100_noniid'
#dataset_path = r'C:\Users\kuiha\OneDrive - 國立成功大學 National Cheng Kung University\NCKU研究所\FL論文andCode\FlowerFL_code\實驗資料集\content\zip\cifar100_noniid'

"""#IMPORT PKG"""

import os
# Make TensorFlow logs less verbose
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "3"

import sys
# add path to use my package
#sys.path.append('/Implement_FedAdativate')#/home/sheng/document/Kuihao
from datetime import datetime
import numpy as np

from mypkg import (
    ServerArg, 
    ModelNameGenerator,
    secure_mkdir,
    mylog,
    Result_Avg_Last_N_round,
    Simulation_DynamicClientSample,
    Weighted_Aggregate,
    FedAdagrad_Aggregate,
    FedAdam_Aggregate,
    FedYogi_Aggregate,
)

#import tensorflow as tf
'''
from mypkg.TF import (
    CNN_Model, 
    myResNet, 
    GoogleAdaptive_tfds_preprocessor, 
    simple_cifar100_preprocessor,
    myLoadDS
    )
'''

"""# Desktop Setting"""

# --------
# [Welcome prompt] Make model name
# --------
args = ServerArg()
model_name = ModelNameGenerator(args.name)
print(f"*** This model name: {model_name} ***\n")

# --------
# [Hardware setting] CPU only or limit the GPU usage
# --------
if args.cpu:
    os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
    os.environ["CUDA_VISIBLE_DEVICES"] = ""
else:
    #from mypkg.TF import setGPU
    #setGPU(mode=1)
    if args.gpu is not None:
        os.environ["CUDA_VISIBLE_DEVICES"]= str(args.gpu)
        from mypkg.TF import setGPU
        setGPU(mode=3, device_num=args.gpu)
    else:
        from mypkg.TF import setGPU
        setGPU(mode=1) # Dataset size 會影響 GPU memory 需求

import tensorflow as tf
import tensorflow_addons as tfa
from mypkg.TF import (
    CNN_Model, 
    myResNet, 
    GoogleAdaptive_tfds_preprocessor, 
    simple_cifar100_preprocessor,
    myLoadDS
)

"""#[Hyperparemeter]"""

#model_name = 'FL_Simulattion'
SEED = 2021
'''fix random seed'''
np.random.seed(SEED)
tf.random.set_seed(SEED)
model_input_shape = (24,24,3)
model_class_number = 100 # This is LABEL 

SAVE = True
'''(bool) save log or not'''
HyperSet_Aggregation, Aggregation_name = FedYogi_Aggregate, 'FedYogi_Aggregate' #Weighted_Aggregate
HyperSet_round = 200 # 4000*10 / 500 = 80
HyperSet_Train_all_connect_client_number = 500
HypHyperSet_Train_EveryRound_client_number = 500
HyperSet_Test_all_connect_client_number = 100
HypHyperSet_Test_EveryRound_client_number = 100

HyperSet_Server_eta = pow(10,(0)) #1e-3
HyperSet_Server_tau = pow(10,(-1)) #1e-2
HyperSet_Server_beta1 = 0.9 
HyperSet_Server_beta2 = 0.99

HyperSet_Local_eta = pow(10,(-1/2)) #1e-1
HyperSet_Local_momentum = 0.9
HyperSet_Local_batch_size = 20
HyperSet_Local_epoch = 1

# ---
# [Build-Model]
# ---
tf.keras.backend.clear_session()
model = myResNet().ResNet18(model_input_shape,model_class_number)
optimizer = tfa.optimizers.Yogi(learning_rate=HyperSet_Server_eta, 
                                epsilon=HyperSet_Server_tau,
                                beta1=HyperSet_Server_beta1,
                                beta2=HyperSet_Server_beta2,
                                )
#optimizer = tf.keras.optimizers.SGD(learning_rate=HyperSet_Local_eta, momentum=HyperSet_Local_momentum)
#optimizer = tf.keras.optimizers.Adam() #learning_rate=1e-5
model.compile( optimizer, 
        tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), 
        metrics=["accuracy", 'sparse_top_k_categorical_accuracy']) # sparse_top_k_categorical_accuracy, top_k_categorical_accuracy

# ---
# [Preprocessing Setting]
# ---
# Random number generator
rng = tf.random.Generator.from_seed(110, alg='philox')
preprocessor = GoogleAdaptive_tfds_preprocessor(
                          global_seed=SEED, 
                          crop_size=24, 
                          batch_zize=HyperSet_Local_batch_size, 
                          shuffle_buffer=100, 
                          prefetch_buffer=20,              
                        )

# --------
# [Saving Setting]
# --------
Training_result_distributed = {'loss':[],'accuracy':[],'sparse_top_k_categorical_accuracy':[]}
'''Clients Training 的聚合結果'''
Testing_result_centralized = {'loss':[],'accuracy':[],'sparse_top_k_categorical_accuracy':[]}
'''Server Testing 的結果'''
checkpoint_folder = secure_mkdir("ckpoint"+"/"+model_name)
'''保存weight的資料夾'''
checkpoint_path = checkpoint_folder+"/cp-{epoch:04d}.ckpt"
'''保存weight的儲存路徑'''
cp_saver = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,
                                                 save_weights_only=True,
                                                 verbose=2,
                                                 save_freq=100*HyperSet_Local_batch_size*HyperSet_Train_all_connect_client_number) # int:the callback saves the model at end of this many batches.
'''Create a callback that saves the model's weights every some epochs (save 5 times)'''
cp_recovery = tf.keras.callbacks.experimental.BackupAndRestore(backup_dir="/tmp/backup"+"/"+model_name)
'''Store last cp in the tmp forder'''

# ---
# [Load Data]
# ---
# Load Server-side test daraset
server_train_data = myLoadDS(dataset_path+'/server/train/global_train_all', 'tfds')
server_test_data = myLoadDS(dataset_path+'/server/test/global_test_all', 'tfds')

"""
#Centralized
"""
try:
  tf.keras.backend.clear_session() #clear keras tmp data
  model.save_weights(checkpoint_path.format(epoch=1))
  history = model.fit(
                  preprocessor.preprocess(server_train_data, rng, train=True, BruteForce_kill_nan=True, add_minmax=False, normal_mode=False),
                  #tfds_train.map(server_train_data, num_parallel_calls=tf.data.AUTOTUNE).batch(HyperSet_Local_batch_size).prefetch(20),
                  epochs=HyperSet_round,
                  verbose=2,
                  validation_data=preprocessor.preprocess(server_test_data, rng, train=False, BruteForce_kill_nan=True, add_minmax=False, normal_mode=False),
                  callbacks=[cp_recovery, cp_saver],
                )
  # 暫存訓練結果
  Training_result_distributed["loss"] = history.history["loss"]
  Training_result_distributed["accuracy"] = history.history["accuracy"]
  Training_result_distributed["sparse_top_k_categorical_accuracy"] = history.history["sparse_top_k_categorical_accuracy"]
  Testing_result_centralized["loss"] = history.history["val_loss"]
  Testing_result_centralized["accuracy"] = history.history["val_accuracy"]
  Testing_result_centralized["sparse_top_k_categorical_accuracy"] = history.history["val_sparse_top_k_categorical_accuracy"]
    
  # 儲存結果
  if SAVE:
    FL_Results_folder = secure_mkdir("FL_Results"+"/"+model_name)
    if Training_result_distributed is not None:
        np.savez(f"{FL_Results_folder}/Training_result_distributed.npz", Training_result_distributed)
    if Testing_result_centralized is not None:
        np.savez(f"{FL_Results_folder}/Testing_result_centralized.npz", Testing_result_centralized)

    checkpoint_folder = secure_mkdir("ckpoint"+"/"+model_name)
    print(f"****Saving model weights...****")
    GlobalModel_NewestWeight = model.get_weights()
    np.savez(f"{checkpoint_folder}/final-round-weights.npz", *GlobalModel_NewestWeight)
    #model.save_weights(checkpoint_path.format(epoch=epochs))
    #model.save(model_path)

    # 移除緊急暫存
    os.rmdir("/tmp/backup"+"/"+model_name)

# 緊急狀況備份
except KeyboardInterrupt or InterruptedError:
  print("KeyboardInterrupt or InterruptedError!!")
  print("Saving model...")
  GlobalModel_NewestWeight = model.get_weights()
  np.savez(f"{checkpoint_folder}/interrupt-round-weights.npz", *GlobalModel_NewestWeight)
  print("Model saved.")

  print("Saving result...")
  FL_Results_folder = secure_mkdir("FL_Results"+"/"+model_name)
  if Training_result_distributed is not None:
      np.savez(f"{FL_Results_folder}/Training_result_distributed.npz", Training_result_distributed)
  if Testing_result_centralized is not None:
      np.savez(f"{FL_Results_folder}/Testing_result_centralized.npz", Testing_result_centralized)
  print("Result saved.")

  print("Logging...")
  now_time = datetime.now()
  time_str = now_time.strftime("%m_%d_%Y__%H_%M_%S")
  log_folder = secure_mkdir("FL_log"+"/"+"InterruptSaved_"+model_name)
  log_text = f'*** Centralized Traing Record ***\n \
             *[This training was unexpectly interrupted.]*\n \
             Model Name: {model_name}\n \
             FL Finish Time: {time_str}\n \
             \n--- FL setting ---\n \
             Aggregation: {Aggregation_name}\n \
             Rounds: {HyperSet_round}\n \
             Traing population: {HyperSet_Train_all_connect_client_number}\n \
             Testing population: {HyperSet_Test_all_connect_client_number}\n \
             Number of client per round: {HypHyperSet_Train_EveryRound_client_number}\n \
             \n--- Server-side hyperparemeter ---\n \
             Learning-rate: {HyperSet_Server_eta}\n \
             Tau: {HyperSet_Server_tau}\n \
             Beta-1: {HyperSet_Server_beta1}\n \
             Beta-2: {HyperSet_Server_beta2}\n \
             \n--- Client-side hyperparemeter ---\n \
             Learning-rate: {HyperSet_Local_eta}\n \
             Momentum: {HyperSet_Local_momentum}\n \
             Local epoch: {HyperSet_Local_epoch}\n \
             Local batch size: {HyperSet_Local_batch_size}\n \
             \n--- Other env. setting ---\n \
             Random Seed: {SEED}\n \
             \n--- Result ---\nCannot save in this mode.'
  mylog(log_text, log_folder+'/log')
  print("Log saved.")
  sys.exit()

if SAVE:
  now_time = datetime.now()
  time_str = now_time.strftime("%m_%d_%Y__%H_%M_%S")
  N = 100 # To calculate the avg N rounds result.
  Train_Loss_avgN, Train_Acc_avgN, Train_TopKAcc_avgN = Result_Avg_Last_N_round(Training_result_distributed,N)
  Test_Loss_avgN, Test_Acc_avgN, Test_TopKAcc_avgN = Result_Avg_Last_N_round(Testing_result_centralized,N)

  log_folder = secure_mkdir("FL_log"+"/"+model_name)
  log_text = f'*** Centralized Traing Record ***\n' \
             f'Model Name: {model_name}\n' \
             f'FL Finish Time: {time_str}\n' \
             f'\n--- FL setting ---\n' \
             f'Aggregation: {Aggregation_name}\n' \
             f'Rounds: {HyperSet_round}\n' \
             f'Traing population: {HyperSet_Train_all_connect_client_number}\n' \
             f'Testing population: {HyperSet_Test_all_connect_client_number}\n' \
             f'Number of client per round: {HypHyperSet_Train_EveryRound_client_number}\n' \
             f'\n--- Server-side hyperparemeter ---\n' \
             f'Learning-rate: {HyperSet_Server_eta}\n' \
             f'Tau: {HyperSet_Server_tau}\n' \
             f'Beta-1: {HyperSet_Server_beta1}\n' \
             f'Beta-2: {HyperSet_Server_beta2}\n' \
             f'\n--- Client-side hyperparemeter ---\n' \
             f'Learning-rate: {HyperSet_Local_eta}\n' \
             f'Momentum: {HyperSet_Local_momentum}\n' \
             f'Local epoch: {HyperSet_Local_epoch}\n' \
             f'Local batch size: {HyperSet_Local_batch_size}\n' \
             f'\n--- Other env. setting ---\n' \
             f'Random Seed: {SEED}\n' \
             f'\n--- Result ---\n' \
             f'--Last result--\n\
             *Last Train Acc.: {Training_result_distributed["accuracy"][-1]}\n \
             Last Train TopK-Acc.: {Training_result_distributed["sparse_top_k_categorical_accuracy"][-1]}\n \
             Last Train Loss: {Training_result_distributed["loss"][-1]}\n \
             *Last Test Acc.: {Testing_result_centralized["accuracy"][-1]}\n \
             Last Test TopK-Acc.: {Testing_result_centralized["sparse_top_k_categorical_accuracy"][-1]}\n \
             Last Test Loss: {Testing_result_centralized["loss"][-1]}\n' \
             f'--Avg last {N} rounds result--\n' \
             f'*Train Acc. (Avg last {N} rounds): {Train_Acc_avgN}\n' \
             f'Train TopK-Acc. (Avg last {N} rounds): {Train_TopKAcc_avgN}\n' \
             f'Train Loss (Avg last {N} rounds): {Train_Loss_avgN}\n' \
             f'*Test Acc. (Avg last {N} rounds): {Test_Acc_avgN}\n' \
             f'Test TopK-Acc. (Avg last {N} rounds): {Test_TopKAcc_avgN}\n' \
             f'Test Loss (Avg last {N} rounds): {Test_Loss_avgN}\n'
  mylog(log_text, log_folder+'/log')
  print("log saved.")

